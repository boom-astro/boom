volumes:
  mongodb:
  valkey:
  kafka_data:

networks:
  boom:
  traefik-public:
    # Allow setting it to false for testing and local development
    external: true

services:
  mongo:
    image: mongo:8.0
    hostname: mongo
    expose:
      - "27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${BOOM_DB_USERNAME:-mongoadmin}
      - MONGO_INITDB_ROOT_PASSWORD=${BOOM_DB_PASSWORD:?BOOM_DB_PASSWORD must be set and non-empty}
    volumes:
      - mongodb:/data/db
    restart: always
    networks:
      - boom
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      start_period: 20s
  valkey:
    image: valkey/valkey:7.2.6
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - VALKEY_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    volumes:
      - valkey:/data
    restart: always
    networks:
      - boom
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  broker:
    image: apache/kafka:latest
    hostname: broker
    networks:
      - boom
      - traefik-public
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_NUM_PARTITIONS: 15
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server broker:9092
      interval: 10s
  api:
    image: boom/boom-api:latest
    hostname: api
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    networks:
      - boom
      - traefik-public
    profiles:
      - prod
    volumes:
      - ${PWD}/config.yaml:/app/config.yaml
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-api.loadbalancer.server.port=4000
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-http.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.tls.certresolver=le
      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}
      # Enable www redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
  scheduler-ztf:
    image: boom/boom-scheduler:latest
    hostname: scheduler
    build:
      context: .
      dockerfile: Dockerfile
      target: scheduler
    networks:
      - boom
    profiles:
      - prod
    volumes:
      - ${PWD}/config.yaml:/app/config.yaml
    command:
      - /app/scheduler
      - ztf
  scheduler-lsst:
    image: boom/boom-scheduler:latest
    hostname: scheduler
    build:
      context: .
      dockerfile: Dockerfile
      target: scheduler
    networks:
      - boom
    profiles:
      - prod
    volumes:
      - ${PWD}/config.yaml:/app/config.yaml
    command:
      - /app/scheduler
      - lsst
  otel-collector: # [^1]
    image: otel/opentelemetry-collector:0.131.1
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otelcol/config.yaml
    networks:
      - boom
  prometheus:
    image: prom/prometheus:latest
    command:
      - --web.enable-otlp-receiver # [^2]
      - --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml
    expose:
      - "9090"
    networks:
      - boom
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-prometheus.loadbalancer.server.port=9090
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.tls.certresolver=le
      # HTTPS redirect middleware
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-http.middlewares=https-redirect
      # Basic auth middleware
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-prometheus-auth.basicauth.users=${PROMETHEUS_USER:?PROMETHEUS_USER must be set}:${PROMETHEUS_HASHED_PASSWORD:?PROMETHEUS_HASHED_PASSWORD must be set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-prometheus-https.middlewares=${STACK_NAME?Variable not set}-prometheus-auth
    restart: always

# [^1]:
#   * https://opentelemetry.io/docs/collector/quick-start/
#   * https://opentelemetry.io/docs/collector/installation/#docker-compose

# [^2]: https://prometheus.io/docs/guides/opentelemetry/#enable-the-otlp-receiver
