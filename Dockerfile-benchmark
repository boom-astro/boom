FROM rust:1.87-slim-bookworm AS builder

RUN apt-get update && \
    apt-get install -y curl gcc g++ libhdf5-dev perl make libsasl2-dev pkg-config && \
    apt-get autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# First we build an empty rust project to cache dependencies
# this way we skip dependencies build when only the source code changes
RUN cargo init app && cd app && cargo init api
COPY Cargo.toml Cargo.lock /app/
COPY api/Cargo.toml /app/api/
RUN cd app && cargo build --release --workspace && \
    rm -rf app/src && rm -rf app/api/src

# Now we copy the source code and build the actual application
WORKDIR /app
COPY ./src ./src
COPY ./api/src ./api/src

# Build the application (all of the binaries)
RUN cargo build --release --workspace


## Create a minimal runtime image for binaries with CUDA support
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

WORKDIR /app

# Install cuDNN and ONNX Runtime with CUDA support
RUN apt-get update && apt-get install -y --no-install-recommends \
    libsasl2-2 ca-certificates wget gnupg2 software-properties-common && \
    # Add NVIDIA's cuDNN repository
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update && \
    # Install specific cuDNN version that matches ONNX Runtime expectations
    apt-get install -y --no-install-recommends \
    libcudnn8=8.9.7.29-1+cuda11.8 \
    libcudnn8-dev=8.9.7.29-1+cuda11.8 && \
    # Hold the cuDNN packages to prevent upgrades
    apt-mark hold libcudnn8 libcudnn8-dev && \
    # Download and install ONNX Runtime
    wget https://github.com/microsoft/onnxruntime/releases/download/v1.18.1/onnxruntime-linux-x64-gpu-1.18.1.tgz && \
    tar -xzf onnxruntime-linux-x64-gpu-1.18.1.tgz && \
    cp onnxruntime-linux-x64-gpu-1.18.1/lib/* /usr/local/lib/ && \
    rm -rf onnxruntime-linux-x64-gpu-1.18.1* cuda-keyring_1.0-1_all.deb && \
    ldconfig && \
    rm -rf /var/lib/apt/lists/*

# Copy the built executables from the builder stage
COPY --from=builder /app/target/release/scheduler /app/scheduler
COPY --from=builder /app/target/release/kafka_consumer /app/kafka_consumer
COPY --from=builder /app/target/release/kafka_producer /app/kafka_producer

# Set the entrypoint, though this will be overridden
CMD ["/app/scheduler"]
